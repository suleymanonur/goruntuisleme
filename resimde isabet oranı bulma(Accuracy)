In [4]:
importcsv
importrandom
importmath
def loadCsv(filename):
lines=csv.reader(open(filename,"r"))
dataset=list(lines)
foriinrange(len(dataset)):
dataset[i]=[float(x)forxindataset[i]]
returndataset
def splitDataset(dataset, splitRatio):
trainSize=int(len(dataset)*splitRatio)
trainSet=[]
copy=list(dataset)
whilelen(trainSet)<trainSize:
index=random.randrange(len(copy))
trainSet.append(copy.pop(index))
return[trainSet, copy]
def separateByClass(dataset):
separated={}
foriinrange(len(dataset)):
vector=dataset[i]
if(vector[-1]notinseparated):
separated[vector[-1]]=[]
separated[vector[-1]].append(vector)
returnseparated
defmean(numbers):
returnsum(numbers)/float(len(numbers))
def stdev(numbers):
avg=mean(numbers)
variance=sum([pow(x-avg,2)forxinnumbers])/float(len(numbers)-1)
returnmath.sqrt(variance)
defsummarize(dataset):
1
summaries=[(mean(attribute), stdev(attribute))forattributeinzip(*dataset)]
delsummaries[-1]
returnsummaries
defsummarizeByClass(dataset):
separated=separateByClass(dataset)
summaries={}
forclassValue, instancesinseparated.items():
summaries[classValue]=summarize(instances)
returnsummaries
defcalculateProbability(x, mean, stdev):
exponent=math.exp(-(math.pow(x-mean,2)/(2*math.pow(stdev,2))))
return(1/(math.sqrt(2*math.pi)*stdev))*exponent
def calculateClassProbabilities(summaries, inputVector):
probabilities={}
forclassValue, classSummariesinsummaries.items():
probabilities[classValue]=1
foriinrange(len(classSummaries)):
mean, stdev=classSummaries[i]
x=inputVector[i]
probabilities[classValue]*=calculateProbability(x, mean, stdev)
returnprobabilities
defpredict(summaries, inputVector):
probabilities=calculateClassProbabilities(summaries, inputVector)
bestLabel, bestProb=None,-1
forclassValue, probabilityinprobabilities.items():
ifbestLabelisNoneorprobability>bestProb:
bestProb=probability
bestLabel=classValue
returnbestLabel
defgetPredictions(summaries, testSet):
predictions=[]
foriinrange(len(testSet)):
result=predict(summaries, testSet[i])
predictions.append(result)
returnpredictions
def getAccuracy(testSet, predictions):
correct=0
foriinrange(len(testSet)):
iftestSet[i][-1]==predictions[i]:
correct+=1
return(correct/float(len(testSet)))*100.0
2
defmain():
filename='pima-indians-diabetes.data.csv'
splitRatio=0.67
dataset=loadCsv(filename)
trainingSet, testSet=splitDataset(dataset, splitRatio)
#print('Split {0} rows into train={1} and test={2} rows').format(len(dataset), len(trainingSet), len(testSet))
# prepare model
summaries=summarizeByClass(trainingSet)
# test model
predictions=getPredictions(summaries, testSet)
accuracy=getAccuracy(testSet, predictions)
print('Accuracy:'+str(accuracy))
main()
Accuracy: 72.83464566929135
